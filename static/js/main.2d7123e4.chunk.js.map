{"version":3,"sources":["components/country.tsx","components/countries.tsx","graphql/methods/index.js","views/ContinentDetailsPage.tsx","components/continent.tsx","components/continents.tsx","views/ContinentsPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Country","country","Col","sm","md","className","emoji","name","languages","length","Countries","countries","map","GET_CONTINENTS","gql","GET_CONTINENT","ContinentDetailsPage","code","useParams","useQuery","variables","loading","error","data","continentData","continent","Container","Row","Continent","to","Continents","continents","ContinentsPage","continentsData","fluid","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.2d7123e4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Col } from \"reactstrap\";\r\nimport { CountryType } from \"../types\";\r\n\r\ninterface CountryProps {\r\n  country: CountryType;\r\n}\r\n\r\nconst Country = ({ country }: CountryProps) => {\r\n  return (\r\n    <Col sm={6} md={4} className=\"my-3\">\r\n      ({country.emoji}) {country.name} -{\" \"}\r\n      {country.languages.length ? country.languages[0].name : \"no languages\"}\r\n    </Col>\r\n  );\r\n};\r\n\r\nexport default Country;\r\n","import React from \"react\";\r\nimport { CountryType } from \"../types\";\r\nimport Country from \"./country\";\r\n\r\ninterface CountriesProps {\r\n  countries: Array<CountryType>;\r\n}\r\n\r\nconst Countries = ({ countries }: CountriesProps) => {\r\n  return (\r\n    <>\r\n      {countries.map((country: CountryType) => (\r\n        <Country country={country} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Countries;\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const GET_CONTINENTS = gql`\r\n  query GetContinents {\r\n    continents {\r\n      code\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_CONTINENT = gql`\r\n  query GetContinent($code: ID!) {\r\n    continent(code: $code) {\r\n      code\r\n      name\r\n      countries {\r\n        code\r\n        name\r\n        emoji\r\n        languages {\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import { useQuery } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Col, Container, Row } from \"reactstrap\";\r\nimport Countries from \"../components/countries\";\r\nimport { GET_CONTINENT } from \"../graphql/methods\";\r\nimport { ParamTypes } from \"../types\";\r\n\r\nconst ContinentDetailsPage = () => {\r\n  const { code } = useParams<ParamTypes>();\r\n  const { loading, error, data } = useQuery(GET_CONTINENT, {\r\n    variables: { code },\r\n  });\r\n\r\n  const continentData = data?.continent;\r\n\r\n  return (\r\n    <Container>\r\n      <Row className=\"py-5\">\r\n        {loading ? (\r\n          <Row>\r\n            <Col className=\"text-center\">Loading...</Col>\r\n          </Row>\r\n        ) : error ? (\r\n          <Row>\r\n            <Col className=\"text-center\">{error}</Col>\r\n          </Row>\r\n        ) : (\r\n          <Countries countries={continentData.countries} />\r\n        )}\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ContinentDetailsPage;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Col, Row } from \"reactstrap\";\r\nimport { ContinentType } from \"../types\";\r\n\r\ninterface ContinentProps {\r\n  continent: ContinentType;\r\n}\r\n\r\nconst Continent = ({ continent }: ContinentProps) => {\r\n  return (\r\n    <Row className=\"my-4 text-center\">\r\n      <Col>\r\n        <Link to={`continents/${continent.code}`} className=\"continent-link\">\r\n          {continent.name} {continent.code}\r\n        </Link>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Continent;\r\n","import React from \"react\";\r\nimport { ContinentType } from \"../types\";\r\nimport Continent from \"./continent\";\r\n\r\ninterface ContinentsProps {\r\n  continents: Array<ContinentType>;\r\n}\r\n\r\nconst Continents = ({ continents }: ContinentsProps) => {\r\n  return (\r\n    <>\r\n      {continents.map((continent: ContinentType) => (\r\n        <Continent continent={continent} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Continents;\r\n","import { useQuery } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { Col, Container, Row } from \"reactstrap\";\r\nimport Continents from \"../components/continents\";\r\nimport { GET_CONTINENTS } from \"../graphql/methods\";\r\n\r\nconst ContinentsPage = () => {\r\n  const { loading, error, data } = useQuery(GET_CONTINENTS);\r\n  const continentsData = data?.continents;\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Row>\r\n        <Col className=\"py-5\">\r\n          {loading ? (\r\n            <Row>\r\n              <Col className=\"text-center\">Loading...</Col>\r\n            </Row>\r\n          ) : error ? (\r\n            <Row>\r\n              <Col className=\"text-center\">{error}</Col>\r\n            </Row>\r\n          ) : (\r\n            <Continents continents={continentsData} />\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ContinentsPage;\r\n","import React from \"react\";\nimport {\n  HashRouter as Router,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport Continent from \"./views/ContinentDetailsPage\";\nimport Continents from \"./views/ContinentsPage\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Redirect to=\"/continents\" />\n        </Route>\n        <Route exact path=\"/continents\">\n          <Continents />\n        </Route>\n        <Route exact path=\"/continents/:code\">\n          <Continent />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst client = new ApolloClient({\n  uri: \"https://countries.trevorblades.com/\",\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}